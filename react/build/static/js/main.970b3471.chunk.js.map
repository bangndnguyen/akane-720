{"version":3,"sources":["components/Base/index.tsx","components/Button/index.tsx","components/ButtonFilled/index.tsx","components/ButtonOutline/index.tsx","components/Input/index.tsx","components/Link/index.tsx","components/LinkIcon/index.tsx","components/View/index.tsx","SignUp/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Base","element","children","css","props","Element","Button","borderRadius","fontWeight","fontSize","padding","cursor","outline","ButtonFilled","border","backgroundColor","ButtonOutline","color","Input","Link","LinkIcon","width","height","boxSizing","alignItems","justifyContent","View","display","flexDirection","SIGN_UP","gql","SignUp","useMutation","signUp","loading","error","data","message","position","top","left","bottom","right","borderBottom","size","initialValues","name","email","password","onSubmit","values","variables","render","handleChange","placeholder","value","onChange","type","marginTop","App","React","useState","isOpenSignup","setIsOpenSignup","minHeight","Helmet","rel","href","sizes","marginRight","src","alt","data-purpose","flexGrow","alignSelf","marginLeft","margin","onClick","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.970b3471.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, InterpolationWithTheme } from \"@emotion/core\";\nimport * as React from \"react\";\n\nexport interface Props {\n  css?: InterpolationWithTheme<any>;\n  element?: keyof JSX.IntrinsicElements;\n}\n\nconst Base: React.FC<Props> = ({ element = \"div\", children, css, ...props }) => {\n  const Element = element as any;\n  return <Element css={css} children={children} {...props} />;\n}\n\nexport default Base;\n","import React, { ButtonHTMLAttributes } from \"react\";\nimport Base from \"../Base\";\n\nconst Button: React.FC<ButtonHTMLAttributes<HTMLButtonElement>> = ({ children, css, ...props }) => {\n  return <Base\n    element=\"button\"\n    css={{\n      borderRadius: \"2px\",\n      fontWeight: 600,\n      fontSize: \"16px\",\n      padding: \"12px\",\n      cursor: \"pointer\",\n      \"&:focus\": {\n        outline: \"0\",\n      },\n      ...css as any,\n    }}\n    {...props}>\n      {children}\n    </Base>;\n};\n\nexport default Button;\n","import React, { ButtonHTMLAttributes } from \"react\";\nimport Button from \"../Button\";\n\nconst ButtonFilled: React.FC<ButtonHTMLAttributes<HTMLButtonElement>> = ({ children, css, ...props }) => {\n  return <Button\n    css={{\n      \"backgroundColor\": \"#ec5252\",\n      \"color\": \"white\",\n      border: 0,\n      \"&:hover\": {\n        backgroundColor: \"#c24242\",\n      },\n      \"&:active\": {\n        backgroundColor: \"#852a2a\",\n      },\n      ...css as any,\n    }} {...props}>\n      {children}\n    </Button>;\n};\n\nexport default ButtonFilled;\n","import React, { ButtonHTMLAttributes } from \"react\";\nimport Button from \"../Button\";\n\nconst ButtonOutline: React.FC<ButtonHTMLAttributes<HTMLButtonElement>> = ({ children, css, ...props }) => {\n  return <Button\n    css={{\n      backgroundColor: \"rgba(0, 0, 0, 0)\",\n      border: \"1px solid #686f7a\",\n      color: \"#686f7a\",\n      ...css as any,\n    }} {...props}>\n      {children}\n    </Button>;\n};\n\nexport default ButtonOutline;\n","import React, { InputHTMLAttributes } from \"react\";\nimport Base from \"../Base\";\n\nconst Input: React.FC<InputHTMLAttributes<HTMLInputElement>> = ({ children, css, ...props }) => {\n  return <Base\n    element=\"input\"\n    css={{\n      border: 0,\n      \"&:focus\": {\n        outline: \"none\",\n      },\n      ...css as any\n    }}\n    {...props}>\n      {children}\n    </Base>;\n};\n\nexport default Input;\n","import React, { AnchorHTMLAttributes } from \"react\";\nimport Base from \"../Base\";\n\nconst Link: React.FC<AnchorHTMLAttributes<HTMLAnchorElement>> = ({ children, css, ...props }) => {\n  return <Base\n    element=\"a\"\n    css={{\n      color: \"#686f7a\",\n      padding: \"12px 15px\",\n      border: \"1px solid transparent\",\n      borderRadius: \"2px\",\n      fontSize: \"14px\",\n      \"&:hover\": {\n        backgroundColor: \"#f2f3f5\",\n        cursor: \"pointer\",\n        border: \"1px solid #686f7a\",\n      },\n      ...css as any\n    }}\n    {...props}>\n      {children}\n    </Base>;\n};\n\nexport default Link;\n","import React, { AnchorHTMLAttributes } from \"react\";\nimport Base from \"../Base\";\n\nconst LinkIcon: React.FC<AnchorHTMLAttributes<HTMLAnchorElement>> = ({ children, css, ...props }) => {\n  return <Base\n    element=\"a\"\n    css={{\n      width: \"44px\",\n      height: \"44px\",\n      color: \"#686f7a\",\n      padding: \"12px\",\n      border: \"1px solid transparent\",\n      borderRadius: \"50%\",\n      boxSizing: \"border-box\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      \"&:hover\": {\n        backgroundColor: \"#f2f3f5\",\n        cursor: \"pointer\",\n        border: \"1px solid #686f7a\",\n      },\n      ...css as any\n    }}\n    {...props}>\n      {children}\n    </Base>;\n};\n\nexport default LinkIcon;\n","import * as React from \"react\";\nimport Base from \"../Base\";\n\nconst View: React.FC<JSX.IntrinsicAttributes> = ({ children, css }) => {\n  return <Base css={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    ...css as any,\n  }}>{children}</Base>;\n}\n\nexport default View;\n","import { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { Form, Formik, FormikValues } from \"formik\";\nimport * as React from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\nimport ButtonFilled from \"../components/ButtonFilled\";\nimport Input from \"../components/Input\";\nimport View from \"../components/View\";\n\nconst SIGN_UP = gql`\n  mutation($name: String!, $email: String!, $password: String!) {\n    signup(name: $name, email: $email, password: $password)\n  }\n`;\n\nconst SignUp: React.FC = () => {\n  const [signUp, { loading, error, data }] = useMutation(SIGN_UP);\n  if (loading) {\n    return <span>Loading...</span>;\n  }\n  if (error) {\n    return <span>{error.message}</span>;\n  }\n  function onSubmit(values: FormikValues) {\n    signUp({ variables: { ...values } });\n  }\n  return (\n    <View\n      css={{\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      <View\n        css={{ backgroundColor: \"white\", width: \"380px\", borderRadius: \"5px\" }}\n      >\n        <View\n          css={{\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            padding: \"24px\",\n            alignItems: \"center\",\n            borderBottom: \"1px solid #686f7a\"\n          }}\n        >\n          Sign Up and Start Learning!\n          <FaTimes size=\"1.5rem\" color=\"#686f7a\" />\n        </View>\n        <Formik\n          initialValues={{ name: \"\", email: \"\", password: \"\" }}\n          onSubmit={onSubmit}\n          render={({ values, handleChange }) => (\n            <Form>\n              <View css={{ padding: \"24px\" }}>\n                <Input\n                  placeholder=\"Full Name\"\n                  name=\"name\"\n                  value={values.name}\n                  onChange={handleChange}\n                  css={{\n                    padding: \"12px 40px\",\n                    fontSize: \"18px\",\n                    border: \"1px solid #686f7a\",\n                    borderRadius: \"3px\"\n                  }}\n                />\n                <Input\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  css={{\n                    padding: \"12px 40px\",\n                    fontSize: \"18px\",\n                    marginTop: \"6px\",\n                    border: \"1px solid #686f7a\",\n                    borderRadius: \"3px\"\n                  }}\n                />\n                <Input\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  css={{\n                    padding: \"12px 40px\",\n                    fontSize: \"18px\",\n                    marginTop: \"6px\",\n                    border: \"1px solid #686f7a\",\n                    borderRadius: \"3px\"\n                  }}\n                />\n                <ButtonFilled css={{ marginTop: \"6px\" }} type=\"submit\">\n                  Sign Up\n                </ButtonFilled>\n              </View>\n            </Form>\n          )}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default SignUp;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { FaSearch, FaShoppingCart } from \"react-icons/fa\";\nimport ButtonFilled from \"./components/ButtonFilled\";\nimport ButtonOutline from \"./components/ButtonOutline\";\nimport Input from \"./components/Input\";\nimport Link from \"./components/Link\";\nimport LinkIcon from \"./components/LinkIcon\";\nimport View from \"./components/View\";\nimport SignUp from \"./SignUp\";\n\nconst App: React.FC = () => {\n  const [isOpenSignup, setIsOpenSignup] = React.useState(true);\n  return (\n    <View css={{ backgroundColor: \"lightgrey\", minHeight: \"100vh\" }}>\n      <Helmet>\n        <title>Online Courses - Learn Anything, Anywhere | Udemy</title>\n        <link\n          rel=\"icon\"\n          type=\"image/png\"\n          href=\"https://www.udemy.com/staticx/udemy/images/v6/favicon-196x196.png\"\n          sizes=\"196x196\"\n        ></link>\n      </Helmet>\n      <View\n        css={{\n          backgroundColor: \"white\",\n          height: \"64px\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"stretch\",\n          padding: \"10px 20px\",\n          boxSizing: \"border-box\"\n        }}\n      >\n        <View css={{ marginRight: \"16px\" }}>\n          <img\n            src=\"https://www.udemy.com/staticx/udemy/images/v6/logo-coral.svg\"\n            alt=\"Udemy\"\n            width=\"110\"\n            height=\"100%\"\n            data-purpose=\"udemy-brand-logo\"\n          ></img>\n        </View>\n        <View\n          css={{\n            flexGrow: 1,\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"stretch\",\n            backgroundColor: \"#f2f3f5\",\n            border: \"1px solid transparent\",\n            borderRadius: \"2px\",\n            boxSizing: \"border-box\",\n            \"&:focus-within\": {\n              border: \"1px solid #686f7a\",\n              backgroundColor: \"transparent\"\n            }\n          }}\n        >\n          <Input\n            placeholder=\"Search for anything\"\n            css={{\n              padding: \"10px 12px\",\n              boxSizing: \"border-box\",\n              fontSize: \"14px\",\n              flexGrow: 1,\n              border: 0,\n              backgroundColor: \"transparent\"\n            }}\n          />\n          <View\n            css={{\n              display: \"flex\",\n              alignItems: \"center\",\n              padding: \"12px\",\n              alignSelf: \"center\"\n            }}\n          >\n            <FaSearch color=\"#ec5252\" size={\"1em\"} />\n          </View>\n        </View>\n        <Link css={{ marginLeft: \"15px\" }}>Teams and Enterprises</Link>\n        <Link css={{ marginLeft: \"3px\" }}>Teach on Udemy</Link>\n        <LinkIcon css={{ margin: \"0 12px\" }}>\n          <FaShoppingCart color=\"#686f7a\" size={\"1.1em\"} />\n        </LinkIcon>\n        <ButtonOutline css={{ marginLeft: \"4px\" }}>Log In</ButtonOutline>\n        <ButtonFilled\n          css={{ marginLeft: \"4px\" }}\n          onClick={() => setIsOpenSignup(true)}\n        >\n          Sign Up\n        </ButtonFilled>\n      </View>\n      {isOpenSignup && <SignUp />}\n    </View>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:8080/graphql\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}